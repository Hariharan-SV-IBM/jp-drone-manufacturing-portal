import db from '@services/db/dbService'

/**
 * Imports mock data into IndexedDB for development and testing purposes.
 * This function fetches the JSON files generated by the Python scripts and
 * populates the database with the sample data.
 */
export async function importMockData(): Promise<void> {
  try {
    console.log('Importing mock data into IndexedDB...')
    
    // Clear existing data
    await clearDatabase()
    
    // Import drones data
    await importDrones()
    
    // Import parts data
    await importParts()
    
    // Import print jobs data
    await importPrintJobs()
    
    console.log('Mock data import completed successfully!')
    return Promise.resolve()
  } catch (error) {
    console.error('Error importing mock data:', error)
    return Promise.reject(error)
  }
}

/**
 * Clears all data from the database.
 */
async function clearDatabase(): Promise<void> {
  console.log('Clearing existing data...')
  
  await db.drones.clear()
  await db.parts.clear()
  await db.printJobs.clear()
  
  console.log('Database cleared')
}

/**
 * Imports drone data from the mock JSON file.
 */
async function importDrones(): Promise<void> {
  try {
    console.log('Importing drones data...')
    
    const response = await fetch('/mock-data/drones.json')
    if (!response.ok) {
      throw new Error(`Failed to fetch drones data: ${response.statusText}`)
    }
    
    const drones = await response.json()
    
    // Convert ISO date strings to Date objects
    const processedDrones = drones.map((drone: any) => ({
      ...drone,
      lastUpdate: new Date(drone.lastUpdate),
      alerts: drone.alerts.map((alert: any) => ({
        ...alert,
        timestamp: new Date(alert.timestamp)
      })),
      history: drone.history.map((event: any) => ({
        ...event,
        timestamp: new Date(event.timestamp)
      }))
    }))
    
    await db.drones.bulkAdd(processedDrones)
    console.log(`Imported ${processedDrones.length} drones`)
  } catch (error) {
    console.error('Error importing drones data:', error)
    throw error
  }
}

/**
 * Imports parts data from the mock JSON file.
 */
async function importParts(): Promise<void> {
  try {
    console.log('Importing parts data...')
    
    const response = await fetch('/mock-data/parts.json')
    if (!response.ok) {
      throw new Error(`Failed to fetch parts data: ${response.statusText}`)
    }
    
    const parts = await response.json()
    
    // Convert ISO date strings to Date objects
    const processedParts = parts.map((part: any) => ({
      ...part,
      createdAt: new Date(part.createdAt),
      updatedAt: new Date(part.updatedAt)
    }))
    
    await db.parts.bulkAdd(processedParts)
    console.log(`Imported ${processedParts.length} parts`)
  } catch (error) {
    console.error('Error importing parts data:', error)
    throw error
  }
}

/**
 * Imports print jobs data from the mock JSON file.
 */
async function importPrintJobs(): Promise<void> {
  try {
    console.log('Importing print jobs data...')
    
    const response = await fetch('/mock-data/print_jobs.json')
    if (!response.ok) {
      throw new Error(`Failed to fetch print jobs data: ${response.statusText}`)
    }
    
    const printJobs = await response.json()
    
    // Convert ISO date strings to Date objects
    const processedJobs = printJobs.map((job: any) => ({
      ...job,
      startTime: job.startTime ? new Date(job.startTime) : undefined,
      estimatedCompletion: job.estimatedCompletion ? new Date(job.estimatedCompletion) : undefined,
      createdAt: new Date(job.createdAt),
      updatedAt: new Date(job.updatedAt)
    }))
    
    await db.printJobs.bulkAdd(processedJobs)
    console.log(`Imported ${processedJobs.length} print jobs`)
  } catch (error) {
    console.error('Error importing print jobs data:', error)
    throw error
  }
}

/**
 * Creates a button in the UI to trigger the mock data import.
 * This is only used during development.
 */
export function createImportButton(): HTMLButtonElement {
  const button = document.createElement('button')
  button.textContent = 'Import Mock Data'
  button.style.position = 'fixed'
  button.style.bottom = '20px'
  button.style.right = '20px'
  button.style.zIndex = '9999'
  button.style.padding = '10px 15px'
  button.style.backgroundColor = '#0ea5e9'
  button.style.color = 'white'
  button.style.border = 'none'
  button.style.borderRadius = '5px'
  button.style.cursor = 'pointer'
  button.style.boxShadow = '0 2px 5px rgba(0, 0, 0, 0.2)'
  
  button.addEventListener('click', async () => {
    button.disabled = true
    button.textContent = 'Importing...'
    
    try {
      await importMockData()
      button.textContent = 'Import Successful!'
      setTimeout(() => {
        button.textContent = 'Import Mock Data'
        button.disabled = false
      }, 2000)
    } catch (error) {
      button.textContent = 'Import Failed'
      button.style.backgroundColor = '#ef4444'
      setTimeout(() => {
        button.textContent = 'Import Mock Data'
        button.style.backgroundColor = '#0ea5e9'
        button.disabled = false
      }, 2000)
    }
  })
  
  return button
}

// Add the import button to the UI in development mode
if (import.meta.env.DEV) {
  window.addEventListener('DOMContentLoaded', () => {
    document.body.appendChild(createImportButton())
  })
}

// Made with Bob
